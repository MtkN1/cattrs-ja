# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Tin Tvrtković
# This file is distributed under the same license as the cattrs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: cattrs 24.1.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-24 22:39+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../downloads/cattrs/docs/why.md:1
msgid "Why *cattrs*?"
msgstr "*cattrs* が必要な理由"

#: ../../downloads/cattrs/docs/why.md:3
msgid "Python has a rich set of powerful, easy to use, built-in **unstructured** data types like dictionaries, lists and tuples. These data types effortlessly convert into common serialization formats like JSON, MessagePack, CBOR, YAML or TOML."
msgstr "Python には、辞書、リスト、タプルなど、強力で使いやすい組み込みの **非構造化** データ型が豊富に用意されています。これらのデータ型は、JSON、MessagePack、CBOR、YAML、TOML などの一般的なシリアライズ形式に簡単に変換できます。"

#: ../../downloads/cattrs/docs/why.md:6
msgid "But the data that is used by your **business logic** should be **structured** into well-defined classes, since not all combinations of field names or values are valid inputs to your programs. The more trust you can have into the structure of your data, the simpler your code can be, and the fewer edge cases you have to worry about."
msgstr "しかし、**ビジネスロジック** で使用されるデータは、明確に定義されたクラスに **構造化** されるべきです。なぜなら、フィールド名や値のすべての組み合わせがプログラムへの有効な入力となるわけではないからです。データの構造をより信頼できるほど、コードはよりシンプルになり、心配する必要のあるエッジケースは少なくなります。"

#: ../../downloads/cattrs/docs/why.md:9
msgid "When you're handed unstructured data (by your network, file system, database, ...), _cattrs_ helps to convert this data into trustworthy structured data. When you have to convert your structured data into data types that other libraries can handle, _cattrs_ turns your classes and enumerations into dictionaries, integers and strings."
msgstr "ネットワーク、ファイルシステム、データベースなどから非構造化データを受け取った場合、_cattrs_ はこのデータを信頼できる構造化データに変換するのに役立ちます。構造化データを他のライブラリが処理できるデータ型に変換する必要がある場合、_cattrs_ はクラスと列挙型を辞書、整数、文字列に変換します。"

#: ../../downloads/cattrs/docs/why.md:12
msgid "_attrs_ (and to a certain degree dataclasses) are excellent libraries for declaratively describing the structure of your data, but they're purposefully not serialization libraries. *cattrs* is there for you the moment your `attrs.asdict(your_instance)` and `YourClass(**data)` start failing you because you need more control over the conversion process."
msgstr "_attrs_ (そしてある程度は dataclasses) は、データの構造を宣言的に記述するための優れたライブラリですが、意図的にシリアライゼーションライブラリではありません。`attrs.asdict(your_instance)` と `YourClass(**data)` が、変換プロセスをより細かく制御する必要があるために失敗し始めたとき、*cattrs* が役に立ちます。"

#: ../../downloads/cattrs/docs/why.md:16
msgid "Examples"
msgstr "例"

#: ../../downloads/cattrs/README.md:1144
msgid "_cattrs_ works best with [_attrs_](https://www.attrs.org/) classes, and [dataclasses](https://docs.python.org/3/library/dataclasses.html) where simple (un-)structuring works out of the box, even for nested data, without polluting your data model with serialization details:"
msgstr "_cattrs_ は、[_attrs_](https://www.attrs.org/) クラスや [dataclasses](https://docs.python.org/3/library/dataclasses.html) との組み合わせで最高のパフォーマンスを発揮します。これらのライブラリでは、単純な (非) 構造化が、ネストされたデータであっても、シリアライゼーションの詳細でデータモデルを汚染することなく、すぐに利用できます。"

#: ../../downloads/cattrs/docs/why.md:24
msgid "Note how the structuring and unstructuring details do **not** pollute your class, meaning: your data model. Any needs to configure the conversion are done within *cattrs* itself, not within your data model."
msgstr "構造化と非構造化の詳細がクラス、つまりデータモデルを汚染 **しない** ことに注意してください。変換を構成する必要がある場合は、データモデル内ではなく、*cattrs* 自体の中で行われます。"

#: ../../downloads/cattrs/docs/why.md:27
msgid "There are popular validation libraries for Python that couple your data model with its validation and serialization rules based on, for example, web APIs. We think that's the wrong approach. Validation and serializations are concerns of the edges of your program – not the core. They should neither apply design pressure on your business code, nor affect the performance of your code through unnecessary validation. In bigger real-world code bases it's also common for data coming from multiple sources that need different validation and serialization rules."
msgstr "Python には、Web API などに基づいてデータモデルを検証およびシリアライゼーションルールと結合する、一般的な検証ライブラリがあります。私たちはそれは間違ったアプローチだと考えています。検証とシリアライゼーションは、プログラムのエッジに関するものであり、コアに関するものではありません。それらは、ビジネスコードに設計上の圧力をかけるべきではなく、不必要な検証によってコードのパフォーマンスに影響を与えるべきでもありません。大規模な実際のコードベースでは、異なる検証およびシリアライゼーションルールを必要とする複数のソースからのデータも一般的です。"

#: ../../downloads/cattrs/docs/why.md:33
msgid "🎶 You gotta keep 'em separated. 🎶"
msgstr "🎶 分離しておきましょう。 🎶"

#: ../../downloads/cattrs/docs/why.md:37
msgid "*cattrs* also works with the usual Python collection types like dictionaries, lists, or tuples when you want to **normalize** unstructured data data into a certain (still unstructured) shape. For example, to convert a list of a float, an int and a string into a tuple of ints:"
msgstr "*cattrs* は、非構造化データを特定の (まだ非構造化された) 形状に **正規化** したい場合に、辞書、リスト、タプルなどの通常の Python コレクション型でも機能します。たとえば、float、int、および文字列のリストを int のタプルに変換するには:"

#: ../../downloads/cattrs/docs/why.md:48
msgid "Finally, here's a much more complex example, involving _attrs_ classes where _cattrs_ interprets the type annotations to structure and unstructure the data correctly, including Enums and nested data structures:"
msgstr "最後に、_attrs_ クラスを含む、はるかに複雑な例を次に示します。ここでは、_cattrs_ は型アノテーションを解釈して、Enum やネストされたデータ構造を含むデータを正しく構造化および非構造化します。"

#: ../../downloads/cattrs/docs/why.md:88
msgid "Consider unstructured data a low-level representation that needs to be converted to structured data to be handled, and use `structure()`. When you're done, `unstructure()` the data to its unstructured form and pass it along to another library or module."
msgstr "非構造化データは、処理するために構造化データに変換する必要がある低レベルの表現であると考え、`structure()` を使用します。完了したら、データを `unstructure()` して非構造化形式にし、別のライブラリまたはモジュールに渡します。"

#: ../../downloads/cattrs/README.md:1862
msgid "Features"
msgstr "特徴"

#: ../../downloads/cattrs/README.md:1864
msgid "Recursive Unstructuring"
msgstr "再帰的な非構造化"

#: ../../downloads/cattrs/README.md:1866
msgid "_attrs_ classes and dataclasses are converted into dictionaries in a way similar to `attrs.asdict()`, or into tuples in a way similar to `attrs.astuple()`."
msgstr "_attrs_ クラスと dataclasses は、`attrs.asdict()` と同様の方法で辞書に変換されるか、`attrs.astuple()` と同様の方法でタプルに変換されます。"

#: ../../downloads/cattrs/README.md:1867
msgid "Enumeration instances are converted to their values."
msgstr "列挙型のインスタンスは、それらの値に変換されます。"

#: ../../downloads/cattrs/README.md:1868
msgid "Other types are let through without conversion. This includes types such as integers, dictionaries, lists and instances of non-_attrs_ classes."
msgstr "他の型は、変換なしでそのまま使用されます。これには、整数、辞書、リスト、および _attrs_ クラス以外のクラスのインスタンスなどの型が含まれます。"

#: ../../downloads/cattrs/README.md:1869
msgid "Custom converters for any type can be registered using `register_unstructure_hook`."
msgstr "任意の型のカスタムコンバーターは、`register_unstructure_hook` を使用して登録できます。"

#: ../../downloads/cattrs/README.md:1872
msgid "Recursive Structuring"
msgstr "再帰的な構造化"

#: ../../downloads/cattrs/README.md:1874
msgid "Converts unstructured data into structured data, recursively, according to your specification given as a type. The following types are supported:"
msgstr "非構造化データを、型として指定された仕様に従って、再帰的に構造化データに変換します。次の型がサポートされています:"

#: ../../downloads/cattrs/README.md:1877
msgid "`typing.Optional[T]` and its 3.10+ form, `T | None`."
msgstr "`typing.Optional[T]` およびその 3.10 以降の形式である `T | None`。"

#: ../../downloads/cattrs/README.md:1878
msgid "`list[T]`, `typing.List[T]`, `typing.MutableSequence[T]`, `typing.Sequence[T]` convert to a lists."
msgstr "`list[T]`、`typing.List[T]`、`typing.MutableSequence[T]`、`typing.Sequence[T]` はリストに変換されます。"

#: ../../downloads/cattrs/README.md:1879
msgid "`tuple` and `typing.Tuple` (both variants, `tuple[T, ...]` and `tuple[X, Y, Z]`)."
msgstr "`tuple` および `typing.Tuple` (両方のバリアント、`tuple[T, ...]` および `tuple[X, Y, Z]`)。"

#: ../../downloads/cattrs/README.md:1880
msgid "`set[T]`, `typing.MutableSet[T]`, and `typing.Set[T]` convert to a sets."
msgstr "`set[T]`、`typing.MutableSet[T]`、および `typing.Set[T]` はセットに変換されます。"

#: ../../downloads/cattrs/README.md:1881
msgid "`frozenset[T]`, and `typing.FrozenSet[T]` convert to a frozensets."
msgstr "`frozenset[T]` および `typing.FrozenSet[T]` は frozenset に変換されます。"

#: ../../downloads/cattrs/README.md:1882
msgid "`dict[K, V]`, `typing.Dict[K, V]`, `typing.MutableMapping[K, V]`, and `typing.Mapping[K, V]` convert to a dictionaries."
msgstr "`dict[K, V]`、`typing.Dict[K, V]`、`typing.MutableMapping[K, V]`、および `typing.Mapping[K, V]` は辞書に変換されます。"

#: ../../downloads/cattrs/README.md:1883
msgid "[`typing.TypedDict`](https://docs.python.org/3/library/typing.html#typing.TypedDict), ordinary and generic."
msgstr "[`typing.TypedDict`](https://docs.python.org/3/library/typing.html#typing.TypedDict)、通常およびジェネリック。"

#: ../../downloads/cattrs/README.md:1884
msgid "[`typing.NewType`](https://docs.python.org/3/library/typing.html#newtype)"
msgstr "[`typing.NewType`](https://docs.python.org/3/library/typing.html#newtype)"

#: ../../downloads/cattrs/README.md:1885
msgid "[PEP 695 type aliases](https://docs.python.org/3/library/typing.html#type-aliases) on 3.12+"
msgstr "[PEP 695 型エイリアス](https://docs.python.org/3/library/typing.html#type-aliases) (3.12 以降)"

#: ../../downloads/cattrs/README.md:1886
msgid "_attrs_ classes with simple attributes and the usual `__init__`[^simple]."
msgstr "単純な属性と通常の `__init__`[^simple] を持つ _attrs_ クラス。"

#: ../../downloads/cattrs/README.md:1887
msgid "All _attrs_ classes and dataclasses with the usual `__init__`, if their complex attributes have type metadata."
msgstr "通常の `__init__` を持つすべての _attrs_ クラスと dataclasses (それらの複雑な属性が型メタデータを持っている場合)。"

#: ../../downloads/cattrs/README.md:1888
msgid "Unions of supported _attrs_ classes, given that all of the classes have a unique field."
msgstr "サポートされている _attrs_ クラスの Union (すべてのクラスが一意のフィールドを持っている場合)。"

#: ../../downloads/cattrs/README.md:1889
msgid "Unions of anything, if you provide a disambiguation function for it."
msgstr "任意のものの Union (それに対する曖昧さ回避関数を提供する場合)。"

#: ../../downloads/cattrs/README.md:1890
msgid "Custom converters for any type can be registered using `register_structure_hook`."
msgstr "任意の型のカスタムコンバーターは、`register_structure_hook` を使用して登録できます。"

#: ../../downloads/cattrs/README.md:1895
msgid "Batteries Included"
msgstr "標準添付"

#: ../../downloads/cattrs/README.md:1897
msgid "_cattrs_ comes with pre-configured converters for a number of serialization libraries, including JSON (standard library, [_orjson_](https://pypi.org/project/orjson/), [UltraJSON](https://pypi.org/project/ujson/)), [_msgpack_](https://pypi.org/project/msgpack/), [_cbor2_](https://pypi.org/project/cbor2/), [_bson_](https://pypi.org/project/bson/), [PyYAML](https://pypi.org/project/PyYAML/), [_tomlkit_](https://pypi.org/project/tomlkit/) and [_msgspec_](https://pypi.org/project/msgspec/) (supports only JSON at this time)."
msgstr "_cattrs_ には、JSON (標準ライブラリ、[_orjson_](https://pypi.org/project/orjson/)、[UltraJSON](https://pypi.org/project/ujson/))、[_msgpack_](https://pypi.org/project/msgpack/)、[_cbor2_](https://pypi.org/project/cbor2/)、[_bson_](https://pypi.org/project/bson/)、[PyYAML](https://pypi.org/project/PyYAML/)、[_tomlkit_](https://pypi.org/project/tomlkit/)、[_msgspec_](https://pypi.org/project/msgspec/) (現時点では JSON のみをサポート) など、多数のシリアライゼーションライブラリ用に事前構成されたコンバーターが付属しています。"

#: ../../downloads/cattrs/README.md:1899
msgid "For details, see the [cattrs.preconf package](https://catt.rs/en/stable/preconf.html)."
msgstr "詳細については、[cattrs.preconf パッケージ](https://catt.rs/en/stable/preconf.html) を参照してください。"

#: ../../downloads/cattrs/README.md:1902
msgid "Design Decisions"
msgstr "設計上の決定"

#: ../../downloads/cattrs/README.md:1904
msgid "_cattrs_ is based on a few fundamental design decisions:"
msgstr "_cattrs_ は、いくつかの基本的な設計上の決定に基づいています:"

#: ../../downloads/cattrs/README.md:1906
msgid "Un/structuring rules are separate from the models. This allows models to have a one-to-many relationship with un/structuring rules, and to create un/structuring rules for models which you do not own and you cannot change. (_cattrs_ can be configured to use un/structuring rules from models using the [`use_class_methods` strategy](https://catt.rs/en/latest/strategies.html#using-class-specific-structure-and-unstructure-methods).)"
msgstr "非構造化/構造化ルールはモデルから分離されています。これにより、モデルは非構造化/構造化ルールと一対多の関係を持つことができ、所有しておらず変更できないモデルの非構造化/構造化ルールを作成できます。(_cattrs_ は、[`use_class_methods` 戦略](https://catt.rs/en/latest/strategies.html#using-class-specific-structure-and-unstructure-methods) を使用して、モデルから非構造化/構造化ルールを使用するように構成できます。)"

#: ../../downloads/cattrs/README.md:1909
msgid "Invent as little as possible; reuse existing ordinary Python instead. For example, _cattrs_ did not have a custom exception type to group exceptions until the sanctioned Python [`exceptiongroups`](https://docs.python.org/3/library/exceptions.html#ExceptionGroup). A side-effect of this design decision is that, in a lot of cases, when you're solving _cattrs_ problems you're actually learning Python instead of learning _cattrs_."
msgstr "可能な限り発明を控え、代わりに既存の通常の Python を再利用します。たとえば、_cattrs_ には、認可された Python の [`exceptiongroups`](https://docs.python.org/3/library/exceptions.html#ExceptionGroup) が登場するまで、例外をグループ化するためのカスタム例外型はありませんでした。この設計上の決定の副作用として、多くの場合、_cattrs_ の問題を解決しているときに、実際には _cattrs_ を学習するのではなく、Python を学習しています。"

#: ../../downloads/cattrs/README.md:1912
msgid "Resist the temptation to guess. If there are two ways of solving a problem, _cattrs_ should refuse to guess and let the user configure it themselves."
msgstr "推測する誘惑に抵抗してください。問題を解決する方法が 2 つある場合、_cattrs_ は推測を拒否し、ユーザー自身が構成できるようにする必要があります。"

#: ../../downloads/cattrs/README.md:1915
msgid "A foolish consistency is the hobgoblin of little minds, so these decisions can and are sometimes broken, but they have proven to be a good foundation."
msgstr "愚かな一貫性は、小さな心の鬼です。したがって、これらの決定は破られることもありますが、良い基盤であることが証明されています。"

#: ../../downloads/cattrs/docs/why.md:99
msgid "Additional Documentation and Talks"
msgstr "追加のドキュメントと講演"

#: ../../downloads/cattrs/docs/why.md:101
msgid "[On structured and unstructured data, or the case for cattrs](https://threeofwands.com/on-structured-and-unstructured-data-or-the-case-for-cattrs/)"
msgstr "[構造化データと非構造化データについて、または cattrs の事例](https://threeofwands.com/on-structured-and-unstructured-data-or-the-case-for-cattrs/)"

#: ../../downloads/cattrs/docs/why.md:102
msgid "[Why I use attrs instead of pydantic](https://threeofwands.com/why-i-use-attrs-instead-of-pydantic/)"
msgstr "[pydantic の代わりに attrs を使用する理由](https://threeofwands.com/why-i-use-attrs-instead-of-pydantic/)"

#: ../../downloads/cattrs/docs/why.md:103
msgid "[cattrs I: un/structuring speed](https://threeofwands.com/why-cattrs-is-so-fast/)"
msgstr "[cattrs I: 非構造化/構造化の速度](https://threeofwands.com/why-cattrs-is-so-fast/)"

#: ../../downloads/cattrs/docs/why.md:104
msgid "[Python has a macro language - it's Python (PyCon IT 2022)](https://www.youtube.com/watch?v=UYRSixikUTo)"
msgstr "[Python にはマクロ言語がある - それは Python (PyCon IT 2022)](https://www.youtube.com/watch?v=UYRSixikUTo)"

#: ../../downloads/cattrs/docs/why.md:105
msgid "[Intro to cattrs 23.1](https://threeofwands.com/intro-to-cattrs-23-1-0/)"
msgstr "[cattrs 23.1 の紹介](https://threeofwands.com/intro-to-cattrs-23-1-0/)"

#: ../../downloads/cattrs/README.md:1892
msgid "Simple attributes are attributes that can be assigned unstructured data, like numbers, strings, and collections of unstructured data."
msgstr "単純な属性は、数値、文字列、および非構造化データのコレクションなど、非構造化データを割り当てることができる属性です。"

