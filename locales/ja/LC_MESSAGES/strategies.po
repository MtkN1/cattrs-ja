# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Tin Tvrtković
# This file is distributed under the same license as the cattrs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: cattrs 24.1.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-24 22:39+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../downloads/cattrs/docs/strategies.md:1
msgid "Strategies"
msgstr "ストラテジー"

#: ../../downloads/cattrs/docs/strategies.md:3
msgid "_cattrs_ ships with a number of _strategies_ for customizing un/structuring behavior."
msgstr "_cattrs_ には、un/structuring の動作をカスタマイズするためのいくつかの _strategies_ が付属しています。"

#: ../../downloads/cattrs/docs/strategies.md:5
msgid "Strategies are prepackaged, high-level patterns for quickly and easily applying complex customizations to a converter."
msgstr "ストラテジーは、コンバーターに複雑なカスタマイズを迅速かつ簡単に適用するための、事前パッケージ化された高度なパターンです。"

#: ../../downloads/cattrs/docs/strategies.md:7
msgid "Tagged Unions Strategy"
msgstr "タグ付きユニオン戦略"

#: ../../downloads/cattrs/docs/strategies.md:9
#, python-brace-format
msgid "_Found at {py:func}`cattrs.strategies.configure_tagged_union`._"
msgstr "_{py:func}`cattrs.strategies.configure_tagged_union` で見つかりました._"

#: ../../downloads/cattrs/docs/strategies.md:11
msgid "The _tagged union_ strategy allows for un/structuring a union of classes by including an additional field (the _tag_) in the unstructured representation. Each tag value is associated with a member of the union."
msgstr "_タグ付きユニオン_ 戦略を使用すると、非構造化表現に追加のフィールド (_タグ_) を含めることで、クラスのユニオンを un/structuring できます。各タグ値は、ユニオンのメンバーに関連付けられています。"

#: ../../downloads/cattrs/docs/strategies.md:37
msgid "By default, the tag field name is `_type` and the tag value is the class name of the union member. Both the field name and value can be overriden."
msgstr "デフォルトでは、タグフィールド名は `_type` で、タグ値はユニオンメンバーのクラス名です。フィールド名と値はどちらもオーバーライドできます。"

#: ../../downloads/cattrs/docs/strategies.md:40
msgid "The `tag_generator` parameter is a one-argument callable that will be called with every member of the union to generate a mapping of tag values to union members. Here are some common `tag_generator` uses:"
msgstr "`tag_generator` パラメーターは、ユニオンのすべてのメンバーで呼び出され、タグ値からユニオンメンバーへのマッピングを生成する、1 つの引数を持つ呼び出し可能です。一般的な `tag_generator` の使用法を次に示します。"

#: ../../downloads/cattrs/docs/strategies.md:14
msgid "Tag info available in"
msgstr "利用可能なタグ情報"

#: ../../downloads/cattrs/docs/strategies.md:14
msgid "Recommended `tag_generator`"
msgstr "推奨される `tag_generator`"

#: ../../downloads/cattrs/docs/strategies.md:14
msgid "Name of the class"
msgstr "クラスの名前"

#: ../../downloads/cattrs/docs/strategies.md:14
msgid "Use the default, or `lambda cl: cl.__name__`"
msgstr "デフォルトを使用するか、`lambda cl: cl.__name__` を使用します"

#: ../../downloads/cattrs/docs/strategies.md:14
msgid "A class variable (`classvar`)"
msgstr "クラス変数 (`classvar`)"

#: ../../downloads/cattrs/docs/strategies.md:14
msgid "`lambda cl: cl.classvar`"
msgstr "`lambda cl: cl.classvar`"

#: ../../downloads/cattrs/docs/strategies.md:14
msgid "A dictionary (`mydict`)"
msgstr "辞書 (`mydict`)"

#: ../../downloads/cattrs/docs/strategies.md:14
msgid "`mydict.get` or `mydict.__getitem__`"
msgstr "`mydict.get` または `mydict.__getitem__`"

#: ../../downloads/cattrs/docs/strategies.md:14
msgid "An enum of possible values"
msgstr "可能な値の列挙型"

#: ../../downloads/cattrs/docs/strategies.md:14
msgid "Build a dictionary of classes to enum values and use it"
msgstr "クラスから列挙値への辞書を作成して使用します"

#: ../../downloads/cattrs/docs/strategies.md:50
msgid "The union members aren't required to be attrs classes or dataclasses, although those work automatically. They may be anything that cattrs can un/structure from/to a dictionary, for example a type with registered custom hooks."
msgstr "ユニオンのメンバーは、attrs クラスまたは dataclass である必要はありませんが、それらは自動的に機能します。それらは、cattrs が辞書との間で un/structure できるものであれば何でもかまいません。たとえば、登録済みのカスタムフックを持つ型などです。"

#: ../../downloads/cattrs/docs/strategies.md:53
msgid "A default member can be specified to be used if the tag is missing or is unknown. This is useful for evolving APIs in a backwards-compatible way; an endpoint taking class `A` can be changed to take `A | B` with `A` as the default (for old clients which do not send the tag)."
msgstr "タグがない場合、または不明な場合に使用されるデフォルトのメンバーを指定できます。これは、下位互換性のある方法で API を進化させるのに役立ちます。クラス `A` を受け取るエンドポイントを、`A` をデフォルトとして `A | B` を受け取るように変更できます (タグを送信しない古いクライアントの場合)。"

#: ../../downloads/cattrs/docs/strategies.md:56
msgid "This strategy only applies in the context of the union; the normal un/structuring hooks are left untouched. This also means union members can be reused in multiple unions easily."
msgstr "この戦略は、ユニオンのコンテキストでのみ適用されます。通常の un/structuring フックは変更されません。これは、ユニオンメンバーを複数のユニオンで簡単に再利用できることも意味します。"

#: ../../downloads/cattrs/docs/strategies.md:70
msgid "Real-life Case Study"
msgstr "実際のケーススタディ"

#: ../../downloads/cattrs/docs/strategies.md:72
msgid "The Apple App Store supports [server callbacks](https://developer.apple.com/documentation/appstoreservernotifications), by which Apple sends a JSON payload to a URL of your choice. The payload can be interpreted as about a dozen different messages, based on the value of the `notificationType` field."
msgstr "Apple App Store は [サーバーコールバック](https://developer.apple.com/documentation/appstoreservernotifications) をサポートしており、Apple は JSON ペイロードをユーザーが選択した URL に送信します。ペイロードは、`notificationType` フィールドの値に基づいて、約 12 種類の異なるメッセージとして解釈できます。"

#: ../../downloads/cattrs/docs/strategies.md:75
msgid "To keep the example simple we define two classes, one for the `REFUND` event and one for everything else."
msgstr "例を簡単にするために、`REFUND` イベント用のクラスと、それ以外のすべてのイベント用のクラスの 2 つを定義します。"

#: ../../downloads/cattrs/docs/strategies.md:91
msgid "Next, we use the _tagged unions_ strategy to prepare our converter. The tag value for the `Refund` event is `REFUND`, and we can let the `OtherAppleNotification` class handle all the other cases. The `tag_generator` parameter is a callable, so we can give it the `get` method of a dictionary."
msgstr "次に、_タグ付きユニオン_ 戦略を使用して、コンバーターを準備します。`Refund` イベントのタグ値は `REFUND` であり、他のすべてのケースは `OtherAppleNotification` クラスに処理させることができます。`tag_generator` パラメーターは呼び出し可能であるため、辞書の `get` メソッドを指定できます。"

#: ../../downloads/cattrs/docs/strategies.md:110
msgid "The converter is now ready to start structuring Apple notifications."
msgstr "コンバーターは、Apple 通知の構造化を開始する準備ができました。"

#: ../../downloads/cattrs/docs/strategies.md:129
msgid "Include Subclasses Strategy"
msgstr "サブクラスを含める戦略"

#: ../../downloads/cattrs/docs/strategies.md:131
#, python-brace-format
msgid "_Found at {py:func}`cattrs.strategies.include_subclasses`._"
msgstr "_{py:func}`cattrs.strategies.include_subclasses` で見つかりました._"

#: ../../downloads/cattrs/docs/strategies.md:133
msgid "The _include subclass_ strategy allows the un/structuring of a base class to an instance of itself or one of its descendants. Conceptually with this strategy, each time an un/structure operation for the base class is asked, `cattrs` machinery replaces that operation as if the union of the base class and its descendants had been asked instead."
msgstr "_サブクラスを含める_ 戦略を使用すると、基本クラスの un/structuring を、それ自体のインスタンスまたはその子孫の 1 つに対して行うことができます。概念的には、この戦略では、基本クラスの un/structure 操作が要求されるたびに、`cattrs` メカニズムは、基本クラスとその子孫のユニオンが代わりに要求されたかのように、その操作を置き換えます。"

#: ../../downloads/cattrs/docs/strategies.md:160
msgid "In the example above, we asked to unstructure then structure a `Child` instance as the `Parent` class and in both cases we correctly obtained back the unstructured and structured versions of the `Child` instance. If we did not apply the `include_subclasses` strategy, this is what we would have obtained:"
msgstr "上記の例では、`Child` インスタンスを `Parent` クラスとして非構造化してから構造化するように要求し、どちらの場合も、`Child` インスタンスの非構造化バージョンと構造化バージョンを正しく取得しました。`include_subclasses` 戦略を適用しなかった場合、次のようになります。"

#: ../../downloads/cattrs/docs/strategies.md:173
msgid "Without the application of the strategy, in both unstructure and structure operations, we received a `Parent` instance."
msgstr "戦略を適用しない場合、非構造化操作と構造化操作の両方で、`Parent` インスタンスを受け取りました。"

#: ../../downloads/cattrs/docs/strategies.md:176
msgid "The handling of subclasses is an opt-in feature for two main reasons:"
msgstr "サブクラスの処理がオプトイン機能である主な理由は 2 つあります。"

#: ../../downloads/cattrs/docs/strategies.md:177
msgid "Performance. While small and probably negligible in most cases the subclass handling incurs more function calls and has a performance impact."
msgstr "パフォーマンス。小さい場合が多く、ほとんどの場合無視できますが、サブクラスの処理にはより多くの関数呼び出しが発生し、パフォーマンスに影響を与えます。"

#: ../../downloads/cattrs/docs/strategies.md:178
msgid "Customization. The specific handling of subclasses can be different from one situation to the other. In particular there is not apparent universal good defaults for disambiguating the union type. Consequently the decision is left to the user."
msgstr "カスタマイズ。サブクラスの特定の処理は、状況によって異なる場合があります。特に、ユニオン型を明確にするための普遍的に優れたデフォルトはありません。したがって、決定はユーザーに委ねられます。"

#: ../../downloads/cattrs/docs/strategies.md:182
msgid "To work properly, all subclasses must be defined when the `include_subclasses` strategy is applied to a `converter`. If subclasses types are defined later, for instance in the context of a plug-in mechanism using inheritance, then those late defined subclasses will not be part of the subclasses union type and will not be un/structured as expected."
msgstr "適切に機能させるには、`include_subclasses` 戦略が `converter` に適用されるときに、すべてのサブクラスを定義する必要があります。サブクラス型が後で定義された場合 (たとえば、継承を使用するプラグインメカニズムのコンテキストで)、それらの後で定義されたサブクラスはサブクラスユニオン型の一部ではなくなり、期待どおりに un/structured されません。"

#: ../../downloads/cattrs/docs/strategies.md:185
msgid "Customization"
msgstr "カスタマイズ"

#: ../../downloads/cattrs/docs/strategies.md:187
msgid "In the example shown in the previous section, the default options for `include_subclasses` work well because the `Child` class has an attribute that do not exist in the `Parent` class (the `b` attribute). The automatic union type disambiguation function which is based on finding unique fields for each type of the union works as intended."
msgstr "前のセクションで示した例では、`include_subclasses` のデフォルトオプションは、`Child` クラスに `Parent` クラスに存在しない属性 (`b` 属性) があるため、うまく機能します。ユニオンの各タイプの一意のフィールドを見つけることに基づく自動ユニオン型曖昧性除去関数は、意図したとおりに機能します。"

#: ../../downloads/cattrs/docs/strategies.md:190
#, python-brace-format
msgid "Sometimes, more disambiguation customization is required. For instance, the unstructuring operation would have failed if `Child` did not have an extra attribute or if a sibling of `Child` had also a `b` attribute. For those cases, a callable of 2 positional arguments (a union type and a converter) defining a [tagged union strategy](strategies.md#tagged-unions-strategy) can be passed to the `include_subclasses` strategy. {py:func}`configure_tagged_union()<cattrs.strategies.configure_tagged_union>` can be used as-is, but if you want to change its defaults, the [partial](https://docs.python.org/3/library/functools.html#functools.partial) function from the `functools` module in the standard library can come in handy."
msgstr "場合によっては、より多くの曖昧性除去のカスタマイズが必要になります。たとえば、`Child` に追加の属性がない場合、または `Child` の兄弟にも `b` 属性がある場合、非構造化操作は失敗します。これらの場合、[タグ付きユニオン戦略](strategies.md#tagged-unions-strategy) を定義する 2 つの位置引数 (ユニオン型とコンバーター) の呼び出し可能オブジェクトを `include_subclasses` 戦略に渡すことができます。{py:func}`configure_tagged_union()<cattrs.strategies.configure_tagged_union>` はそのまま使用できますが、デフォルトを変更する場合は、標準ライブラリの `functools` モジュールの [partial](https://docs.python.org/3/library/functools.html#functools.partial) 関数が役立ちます。"

#: ../../downloads/cattrs/docs/strategies.md:225
#, python-brace-format
msgid "Other customizations available see are (see {py:func}`include_subclasses()<cattrs.strategies.include_subclasses>`):"
msgstr "利用可能なその他のカスタマイズは次のとおりです ({py:func}`include_subclasses()<cattrs.strategies.include_subclasses>` を参照):"

#: ../../downloads/cattrs/docs/strategies.md:227
msgid "The exact list of subclasses that should participate to the union with the `subclasses` argument."
msgstr "`subclasses` 引数を使用して、ユニオンに参加する必要があるサブクラスの正確なリスト。"

#: ../../downloads/cattrs/docs/strategies.md:228
msgid "Attribute overrides that permit the customization of attributes un/structuring like renaming an attribute."
msgstr "属性の名前変更など、属性の un/structuring のカスタマイズを許可する属性のオーバーライド。"

#: ../../downloads/cattrs/docs/strategies.md:230
msgid "Here is an example involving both customizations:"
msgstr "両方のカスタマイズを含む例を次に示します。"

#: ../../downloads/cattrs/docs/strategies.md:265
msgid "Using Class-Specific Structure and Unstructure Methods"
msgstr "クラス固有の構造化および非構造化メソッドの使用"

#: ../../downloads/cattrs/docs/strategies.md:267
#, python-brace-format
msgid "_Found at {py:func}`cattrs.strategies.use_class_methods`._"
msgstr "_{py:func}`cattrs.strategies.use_class_methods` で見つかりました._"

#: ../../downloads/cattrs/docs/strategies.md:269
msgid "This strategy allows for un/structuring logic on the models themselves. It can be applied for both structuring and unstructuring (also simultaneously)."
msgstr "この戦略により、モデル自体で un/structuring ロジックを使用できます。構造化と非構造化の両方に適用できます (同時にも)。"

#: ../../downloads/cattrs/docs/strategies.md:272
msgid "If a class requires special handling for (un)structuring, you can add a dedicated (un)structuring method:"
msgstr "クラスが (un)structuring に特別な処理を必要とする場合は、専用の (un)structuring メソッドを追加できます。"

#: ../../downloads/cattrs/docs/strategies.md:300
msgid "Any class without a `_structure` or `_unstructure` method will use the default strategy for structuring or unstructuring, respectively. Feel free to use other names. The stategy can be applied multiple times (with different method names)."
msgstr "`_structure` または `_unstructure` メソッドを持たないクラスは、それぞれ構造化または非構造化にデフォルトの戦略を使用します。他の名前を自由に使用してください。この戦略は、複数回適用できます (異なるメソッド名で)。"

#: ../../downloads/cattrs/docs/strategies.md:304
msgid "If you want to (un)structured nested objects, just append a converter parameter to your (un)structuring methods and you will receive the converter there:"
msgstr "ネストされたオブジェクトを (un)構造化する場合は、(un)structuring メソッドにコンバーターパラメーターを追加するだけで、そこにコンバーターが表示されます。"

#: ../../downloads/cattrs/docs/strategies.md:329
msgid "Union Passthrough"
msgstr "ユニオンパススルー"

#: ../../downloads/cattrs/docs/strategies.md:331
#, python-brace-format
msgid "_Found at {py:func}`cattrs.strategies.configure_union_passthrough`._"
msgstr "_{py:func}`cattrs.strategies.configure_union_passthrough` で見つかりました._"

#: ../../downloads/cattrs/docs/strategies.md:333
#, python-brace-format
msgid "The _union passthrough_ strategy enables a {py:class}`Converter <cattrs.BaseConverter>` to structure unions and subunions of given types."
msgstr "_ユニオンパススルー_ 戦略により、{py:class}`Converter <cattrs.BaseConverter>` は、指定された型のユニオンとサブユニオンを構造化できます。"

#: ../../downloads/cattrs/docs/strategies.md:335
msgid "A very common use case for _cattrs_ is processing data created by other serialization libraries, such as _JSON_ or _msgpack_. These libraries are able to directly produce values of unions inherent to the format. For example, every JSON library can differentiate between numbers, booleans, strings and null values since these values are represented differently in the wire format. This strategy enables _cattrs_ to offload the creation of these values to an underlying library and just validate the final value. So, _cattrs_ preconfigured JSON converters can handle the following type:"
msgstr "_cattrs_ の非常に一般的なユースケースは、_JSON_ や _msgpack_ などの他のシリアル化ライブラリによって作成されたデータを処理することです。これらのライブラリは、形式に固有のユニオンの値を直接生成できます。たとえば、すべての JSON ライブラリは、数値、ブール値、文字列、および null 値を区別できます。これは、これらの値がワイヤ形式で異なる方法で表されるためです。この戦略により、_cattrs_ はこれらの値の作成を基になるライブラリにオフロードし、最終的な値を検証するだけで済みます。したがって、_cattrs_ 構成済みの JSON コンバーターは、次のタイプを処理できます。"

#: ../../downloads/cattrs/docs/strategies.md:341
msgid "`bool | int | float | str | None`"
msgstr "`bool | int | float | str | None`"

#: ../../downloads/cattrs/docs/strategies.md:343
msgid "Continuing the JSON example, this strategy also enables structuring subsets of unions of these values. Accordingly, here are some examples of subset unions that are also supported:"
msgstr "JSON の例を続けると、この戦略により、これらの値のユニオンのサブセットを構造化することもできます。したがって、サポートされているサブセットユニオンの例を次に示します。"

#: ../../downloads/cattrs/docs/strategies.md:346
msgid "`bool | int`"
msgstr "`bool | int`"

#: ../../downloads/cattrs/docs/strategies.md:347
msgid "`int | str`"
msgstr "`int | str`"

#: ../../downloads/cattrs/docs/strategies.md:348
msgid "`int | float | str`"
msgstr "`int | float | str`"

#: ../../downloads/cattrs/docs/strategies.md:350
msgid "The strategy also supports types including one or more [Literals](https://mypy.readthedocs.io/en/stable/literal_types.html#literal-types) of supported types. For example:"
msgstr "この戦略は、サポートされている型の 1 つ以上の [リテラル](https://mypy.readthedocs.io/en/stable/literal_types.html#literal-types) を含む型もサポートしています。例:"

#: ../../downloads/cattrs/docs/strategies.md:352
msgid "`Literal[\"admin\", \"user\"] | int`"
msgstr "`Literal[\"admin\", \"user\"] | int`"

#: ../../downloads/cattrs/docs/strategies.md:353
msgid "`Literal[True] | str | int | float`"
msgstr "`Literal[True] | str | int | float`"

#: ../../downloads/cattrs/docs/strategies.md:355
msgid "The strategy also supports [NewTypes](https://mypy.readthedocs.io/en/stable/more_types.html#newtypes) of these types. For example:"
msgstr "この戦略は、これらの型の [NewTypes](https://mypy.readthedocs.io/en/stable/more_types.html#newtypes) もサポートしています。例:"

#: ../../downloads/cattrs/docs/strategies.md:366
msgid "Unions containing unsupported types can be handled if at least one union type is supported by the strategy; the supported union types will be checked before the rest (referred to as the _spillover_) is handed over to the converter again."
msgstr "サポートされていない型を含むユニオンは、少なくとも 1 つのユニオン型が戦略でサポートされている場合に処理できます。サポートされているユニオン型は、残りの部分 (_スピルオーバー_ と呼ばれます) がコンバーターに再び渡される前にチェックされます。"

#: ../../downloads/cattrs/docs/strategies.md:368
msgid "For example, if `A` and `B` are arbitrary _attrs_ classes, the union `Literal[10] | A | B` cannot be handled directly by a JSON converter. However, the strategy will check if the value being structured matches `Literal[10]` (because this type _is_ supported) and, if not, will pass it back to the converter to be structured as `A | B` (where a different strategy can handle it)."
msgstr "たとえば、`A` と `B` が任意の _attrs_ クラスである場合、ユニオン `Literal[10] | A | B` は JSON コンバーターで直接処理できません。ただし、この戦略は、構造化されている値が `Literal[10]` と一致するかどうかを確認し (この型はサポートされているため)、一致しない場合は、`A | B` として構造化するためにコンバーターに返します (別の戦略で処理できます)。"

#: ../../downloads/cattrs/docs/strategies.md:371
msgid "The strategy is designed to run in _O(1)_ at structure time; it doesn't depend on the size of the union and the ordering of union members."
msgstr "この戦略は、構造化時に _O(1)_ で実行するように設計されています。ユニオンのサイズとユニオンメンバーの順序には依存しません。"

#: ../../downloads/cattrs/docs/strategies.md:373
msgid "This strategy has been preapplied to the following preconfigured converters:"
msgstr "この戦略は、次の構成済みコンバーターに事前に適用されています。"

#: ../../downloads/cattrs/docs/strategies.md:375
#, python-brace-format
msgid "{py:class}`BsonConverter <cattrs.preconf.bson.BsonConverter>`"
msgstr "{py:class}`BsonConverter <cattrs.preconf.bson.BsonConverter>`"

#: ../../downloads/cattrs/docs/strategies.md:376
#, python-brace-format
msgid "{py:class}`Cbor2Converter <cattrs.preconf.cbor2.Cbor2Converter>`"
msgstr "{py:class}`Cbor2Converter <cattrs.preconf.cbor2.Cbor2Converter>`"

#: ../../downloads/cattrs/docs/strategies.md:377
#, python-brace-format
msgid "{py:class}`JsonConverter <cattrs.preconf.json.JsonConverter>`"
msgstr "{py:class}`JsonConverter <cattrs.preconf.json.JsonConverter>`"

#: ../../downloads/cattrs/docs/strategies.md:378
#, python-brace-format
msgid "{py:class}`MsgpackConverter <cattrs.preconf.msgpack.MsgpackConverter>`"
msgstr "{py:class}`MsgpackConverter <cattrs.preconf.msgpack.MsgpackConverter>`"

#: ../../downloads/cattrs/docs/strategies.md:379
#, python-brace-format
msgid "{py:class}`MsgspecJsonConverter <cattrs.preconf.msgspec.MsgspecJsonConverter>`"
msgstr "{py:class}`MsgspecJsonConverter <cattrs.preconf.msgspec.MsgspecJsonConverter>`"

#: ../../downloads/cattrs/docs/strategies.md:380
#, python-brace-format
msgid "{py:class}`OrjsonConverter <cattrs.preconf.orjson.OrjsonConverter>`"
msgstr "{py:class}`OrjsonConverter <cattrs.preconf.orjson.OrjsonConverter>`"

#: ../../downloads/cattrs/docs/strategies.md:381
#, python-brace-format
msgid "{py:class}`PyyamlConverter <cattrs.preconf.pyyaml.PyyamlConverter>`"
msgstr "{py:class}`PyyamlConverter <cattrs.preconf.pyyaml.PyyamlConverter>`"

#: ../../downloads/cattrs/docs/strategies.md:382
#, python-brace-format
msgid "{py:class}`TomlkitConverter <cattrs.preconf.tomlkit.TomlkitConverter>`"
msgstr "{py:class}`TomlkitConverter <cattrs.preconf.tomlkit.TomlkitConverter>`"

#: ../../downloads/cattrs/docs/strategies.md:383
#, python-brace-format
msgid "{py:class}`UjsonConverter <cattrs.preconf.ujson.UjsonConverter>`"
msgstr "{py:class}`UjsonConverter <cattrs.preconf.ujson.UjsonConverter>`"

